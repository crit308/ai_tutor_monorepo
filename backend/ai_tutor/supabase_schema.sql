-- Supabase Schema Initialization for AI Tutor Project
-- Run these commands in the Supabase SQL Editor.
-- Last Updated: 2024-04-07

-- ==========================================
-- 1. SESSIONS TABLE SETUP
-- ==========================================
-- Description: Stores the context and state for each user's tutoring session.

-- Create the folders table first
CREATE TABLE public.folders (
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL,
    name character varying NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    vector_store_id character varying(255) NULL, -- Store the OpenAI vector store ID
    knowledge_base text NULL, -- Store the analysis text here
    CONSTRAINT folders_pkey PRIMARY KEY (id),
    CONSTRAINT folders_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE
);

-- Add comments for folders table
COMMENT ON TABLE public.folders IS 'Stores user-created folders for organizing documents and learning content.';
COMMENT ON COLUMN public.folders.id IS 'Unique identifier for the folder.';
COMMENT ON COLUMN public.folders.user_id IS 'Links to the authenticated user who owns the folder.';
COMMENT ON COLUMN public.folders.name IS 'User-defined name for the folder.';
COMMENT ON COLUMN public.folders.created_at IS 'Timestamp when the folder was created.';
COMMENT ON COLUMN public.folders.updated_at IS 'Timestamp when the folder was last updated.';
COMMENT ON COLUMN public.folders.vector_store_id IS 'The OpenAI vector store ID associated with this folder''s documents.';
COMMENT ON COLUMN public.folders.knowledge_base IS 'Stores the text content generated by the document analyzer agent.';

-- Enable RLS for folders table
ALTER TABLE public.folders ENABLE ROW LEVEL SECURITY;

-- Create the table
CREATE TABLE public.sessions (
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL,
    context_data jsonb NOT NULL, -- Store the TutorContext object here
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    folder_id uuid NULL, -- Link to the folder this session belongs to
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    ended_at timestamptz NULL,
    analysis_status TEXT NULL, -- Possible values: NULL (default), 'processing', 'success', 'failed'
    CONSTRAINT sessions_pkey PRIMARY KEY (id),
    CONSTRAINT sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT sessions_folder_id_fkey FOREIGN KEY (folder_id) REFERENCES public.folders(id) ON UPDATE CASCADE ON DELETE SET NULL -- Or CASCADE if sessions should be deleted with folders
);

-- Add comments
COMMENT ON TABLE public.sessions IS 'Stores AI tutor session state and context for users.';
COMMENT ON COLUMN public.sessions.folder_id IS 'Links to the folder containing the documents for this session.';
COMMENT ON COLUMN public.sessions.id IS 'Unique identifier for the session.';
COMMENT ON COLUMN public.sessions.user_id IS 'Links to the authenticated user who owns the session.';
COMMENT ON COLUMN public.sessions.context_data IS 'JSONB blob containing the serialized TutorContext Pydantic model.';
COMMENT ON COLUMN public.sessions.created_at IS 'Timestamp when the session was created.';
COMMENT ON COLUMN public.sessions.updated_at IS 'Timestamp when the session was last updated.';
COMMENT ON COLUMN public.sessions.ended_at IS 'Timestamp when the session was considered ended and analysis was triggered.';
COMMENT ON COLUMN public.sessions.analysis_status IS 'Tracks the status of the post-session analysis background job.';

-- Create the trigger function for updated_at
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply the trigger to the sessions table
CREATE TRIGGER on_sessions_updated
BEFORE UPDATE ON public.sessions
FOR EACH ROW
EXECUTE PROCEDURE public.handle_updated_at();

-- Apply the updated_at trigger to the folders table
CREATE TRIGGER on_folders_updated
BEFORE UPDATE ON public.folders
FOR EACH ROW
EXECUTE PROCEDURE public.handle_updated_at();

-- Enable Row Level Security (RLS)
ALTER TABLE public.sessions ENABLE ROW LEVEL SECURITY;

-- Grant basic permissions (usually handled by Supabase, but explicit grant is safe)
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.sessions TO authenticated;

-- Grant basic permissions for folders table
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.folders TO authenticated;


-- ==========================================
-- 2. RLS POLICIES FOR sessions TABLE
-- ==========================================
-- Description: Ensures users can only access/modify their own session data.

-- Allow users to select their own sessions
CREATE POLICY "Allow individual user select access"
ON public.sessions
FOR SELECT
USING (auth.uid() = user_id);

-- Allow users to insert new sessions for themselves
CREATE POLICY "Allow individual user insert access"
ON public.sessions
FOR INSERT
WITH CHECK (auth.uid() = user_id);

-- Allow users to update their own sessions
CREATE POLICY "Allow individual user update access"
ON public.sessions
FOR UPDATE
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

-- Allow users to delete their own sessions (Optional: Remove if deletion is not desired)
CREATE POLICY "Allow individual user delete access"
ON public.sessions
FOR DELETE
USING (auth.uid() = user_id);

-- Ensure sessions.id is uniquely indexed for FK references from concept_events/actions
ALTER TABLE public.sessions
  ADD CONSTRAINT sessions_id_unique UNIQUE (id);


-- ==========================================
-- RLS POLICIES FOR folders TABLE
-- ==========================================
-- Description: Ensures users can only access/modify their own folders.

-- Allow users to select their own folders
CREATE POLICY "Allow individual user select access for folders"
ON public.folders
FOR SELECT
USING (auth.uid() = user_id);

-- Allow users to insert new folders for themselves
CREATE POLICY "Allow individual user insert access for folders"
ON public.folders
FOR INSERT
WITH CHECK (auth.uid() = user_id);

-- Allow users to update their own folders (e.g., rename, update KB)
CREATE POLICY "Allow individual user update access for folders"
ON public.folders
FOR UPDATE
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

-- Allow users to delete their own folders
CREATE POLICY "Allow individual user delete access for folders"
ON public.folders
FOR DELETE
USING (auth.uid() = user_id);


-- ==========================================
-- 3. STORAGE BUCKET AND POLICIES
-- ==========================================
-- Description: Creates the bucket and sets policies for user-specific folder access.

-- Create Storage Bucket (assuming public access controlled by RLS)
INSERT INTO storage.buckets (id, name, public)
VALUES ('document_uploads', 'document_uploads', true)
ON CONFLICT (id) DO NOTHING; -- Avoid error if bucket already exists

-- RLS Policies for Storage Objects (within the 'document_uploads' bucket)
-- Assumes files are stored with a path like 'user_id/folder_id/filename.pdf'

-- Allow users to view files in their own folder
CREATE POLICY "Allow user select access on own folder"
ON storage.objects
FOR SELECT
USING (
    bucket_id = 'document_uploads'
    AND auth.uid() = (storage.foldername(name))[1]::uuid -- checks user_id (first part)
);

-- Allow users to insert files into their own folder
CREATE POLICY "Allow user insert access into own folder"
ON storage.objects
FOR INSERT
WITH CHECK ( -- User must own the folder they are uploading into
    bucket_id = 'document_uploads'
    AND auth.uid() = (storage.foldername(name))[1]::uuid -- checks user_id
    AND EXISTS ( SELECT 1 FROM public.folders WHERE id = (storage.foldername(name))[2]::uuid AND user_id = auth.uid() ) -- checks folder_id (second part) exists and belongs to user
);

-- Allow users to update files in their own folder
CREATE POLICY "Allow user update access in own folder"
ON storage.objects
FOR UPDATE
USING ( -- Same logic as insert/delete: check user owns the folder
    bucket_id = 'document_uploads'
    AND auth.uid() = (storage.foldername(name))[1]::uuid
);

-- Allow users to delete files from their own folder
CREATE POLICY "Allow user delete access from own folder"
ON storage.objects
FOR DELETE
USING (
    bucket_id = 'document_uploads'
    AND auth.uid() = (storage.foldername(name))[1]::uuid
);

-- ==========================================
-- 4. Uploaded Files Table
-- ==========================================
CREATE TABLE public.uploaded_files (
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    supabase_path text NOT NULL,
    user_id uuid NOT NULL REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE,
    folder_id uuid NOT NULL REFERENCES public.folders(id) ON UPDATE CASCADE ON DELETE CASCADE,
    embedding_status text NOT NULL,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now(),
    CONSTRAINT uploaded_files_pkey PRIMARY KEY (id)
);

-- Apply updated_at trigger
CREATE TRIGGER on_uploaded_files_updated
BEFORE UPDATE ON public.uploaded_files
FOR EACH ROW
EXECUTE PROCEDURE public.handle_updated_at();

-- Enable Row Level Security
ALTER TABLE public.uploaded_files ENABLE ROW LEVEL SECURITY;

-- Grant basic permissions
GRANT SELECT, INSERT ON public.uploaded_files TO authenticated;

-- RLS Policies for uploaded_files
CREATE POLICY "Allow individual user select access for uploaded_files"
ON public.uploaded_files
FOR SELECT
USING (auth.uid() = user_id);

CREATE POLICY "Allow individual user insert access for uploaded_files"
ON public.uploaded_files
FOR INSERT
WITH CHECK (auth.uid() = user_id);

-- ==========================================
-- 5. Concept Graph Table
-- ==========================================
CREATE TABLE public.concept_graph (
    id SERIAL PRIMARY KEY,
    prereq TEXT NOT NULL,
    concept TEXT NOT NULL
);

COMMENT ON TABLE public.concept_graph IS 'Stores prerequisite relationships between concepts';
COMMENT ON COLUMN public.concept_graph.prereq IS 'Prerequisite concept';
COMMENT ON COLUMN public.concept_graph.concept IS 'Target concept';

-- Enable RLS for concept_graph table
ALTER TABLE public.concept_graph ENABLE ROW LEVEL SECURITY;

-- Grant basic permissions for concept_graph table
GRANT SELECT, INSERT, UPDATE, DELETE ON public.concept_graph TO authenticated;

-- ==========================================
-- 6. CONCEPT EVENTS & ACTIONS LOGGING TABLES
-- ==========================================
CREATE TABLE public.concept_events (
    id SERIAL PRIMARY KEY,
    session_id UUID NOT NULL REFERENCES public.sessions(id),
    user_id UUID NOT NULL,
    concept TEXT NOT NULL,
    outcome TEXT NOT NULL,
    timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    delta_mastery FLOAT NOT NULL
);
COMMENT ON TABLE public.concept_events IS 'Stores user interactions with concepts and changes in mastery';
ALTER TABLE public.concept_events ENABLE ROW LEVEL SECURITY;
GRANT SELECT, INSERT ON public.concept_events TO authenticated;

CREATE TABLE public.actions (
    id SERIAL PRIMARY KEY,
    session_id UUID NOT NULL REFERENCES public.sessions(id),
    user_id UUID NOT NULL,
    action_type TEXT NOT NULL,
    action_details JSONB,
    timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
COMMENT ON TABLE public.actions IS 'Stores orchestrator actions taken during tutoring sessions';
ALTER TABLE public.actions ENABLE ROW LEVEL SECURITY;
GRANT SELECT, INSERT ON public.actions TO authenticated;

-- ==========================================
-- 7. ACTION WEIGHTS TABLE
-- ==========================================
CREATE TABLE public.action_weights (
    action_type TEXT PRIMARY KEY,
    weight FLOAT NOT NULL,
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
COMMENT ON TABLE public.action_weights IS 'Stores sampling weights for orchestrator actions';
ALTER TABLE public.action_weights ENABLE ROW LEVEL SECURITY;
GRANT SELECT, INSERT, UPDATE ON public.action_weights TO authenticated;

-- ==========================================
-- 8. EDGE LOGS TABLE (Fine-grained telemetry)
-- ==========================================
CREATE TABLE public.edge_logs (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    session_id uuid NOT NULL REFERENCES public.sessions(id),
    user_id uuid NOT NULL,
    tool text NOT NULL,
    latency_ms int,
    prompt_tokens int,
    completion_tokens int,
    created_at timestamptz DEFAULT now(),
    trace_id uuid,
    agent_version text,
    turn_latency_ms int
);
COMMENT ON TABLE public.edge_logs IS 'Fine-grained telemetry for tool usage, latency, and token counts.';
ALTER TABLE public.edge_logs ENABLE ROW LEVEL SECURITY;
GRANT SELECT, INSERT ON public.edge_logs TO authenticated;

-- ==========================================
-- 9. EMBEDDINGS CACHE TABLE
-- ==========================================
BEGIN;
CREATE TABLE IF NOT EXISTS public.embeddings_cache (
    hash        text primary key,
    vector_id   text not null,
    metadata    jsonb default '{}'::jsonb,
    created_at  timestamptz default now()
);
COMMENT ON TABLE public.embeddings_cache IS
  'Deduplicates embeddings by SHA‑256 hash of chunk text.';
COMMIT;

-- ==========================================
-- 10. INTERACTION LOGS TABLE (Phase 3)
-- ==========================================
CREATE TABLE public.interaction_logs (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    session_id uuid NOT NULL REFERENCES public.sessions(id) ON DELETE CASCADE, -- Ensure logs are deleted if session is deleted
    user_id uuid NOT NULL, -- For RLS and potentially analytics filtering
    role text NOT NULL CHECK (role IN ('user', 'agent', 'system')), -- System for messages not directly from user/agent? Or just user/agent? Let's stick to user/agent for simplicity now.
    content text NOT NULL, -- The text message or a JSON representation of structured content
    content_type text NOT NULL DEFAULT 'text', -- e.g., 'text', 'explanation', 'question', 'feedback', 'error'
    event_type text NULL, -- e.g., 'user_message', 'next', 'answer', 'start' (for user actions)
    created_at timestamptz NOT NULL DEFAULT now(),
    -- Optional: Add trace_id if easily available when logging, useful for deep dives
    trace_id uuid NULL
);

COMMENT ON TABLE public.interaction_logs IS 'Stores chronological log of user messages and agent responses during a session.';
COMMENT ON COLUMN public.interaction_logs.role IS 'Who generated the content (user or agent).';
COMMENT ON COLUMN public.interaction_logs.content_type IS 'The type of content (matches InteractionResponseData content_type or "user_input").';
COMMENT ON COLUMN public.interaction_logs.event_type IS 'The type of user action that triggered this part of the interaction (e.g., next, answer).';

-- Enable RLS
ALTER TABLE public.interaction_logs ENABLE ROW LEVEL SECURITY;

-- Grant necessary permissions
GRANT SELECT, INSERT ON public.interaction_logs TO authenticated;

-- RLS Policy for interaction_logs (Users can only read their own logs)
CREATE POLICY "Allow individual user select access for interaction logs"
ON public.interaction_logs
FOR SELECT
USING (auth.uid() = user_id);

-- Policy allowing authenticated users to INSERT logs (backend service will use service_role key)
-- Note: The actual INSERT will likely be done by the backend service role key, bypassing RLS.
-- This policy is more for completeness if direct inserts were ever needed (unlikely).
CREATE POLICY "Allow individual user insert access for interaction logs"
ON public.interaction_logs
FOR INSERT
WITH CHECK (auth.uid() = user_id);

-- Add composite index for efficient log retrieval by session, ordered by time
CREATE INDEX idx_interaction_logs_session_time ON public.interaction_logs (session_id, created_at);

COMMENT ON INDEX idx_interaction_logs_session_time IS 'Improves performance of fetching interaction logs for a specific session, ordered chronologically.';

-- ==========================================
-- 11. RPC FUNCTION FOR KB UPDATE (Phase 3)
-- ==========================================
CREATE OR REPLACE FUNCTION public.append_to_knowledge_base(
    target_folder_id uuid,
    new_summary_text text
)
RETURNS void -- Or return boolean for success/failure if needed
LANGUAGE plpgsql
SECURITY DEFINER -- Important: Allows function to run with definer's privileges (usually postgres superuser) to bypass RLS if needed for updates
AS $$
DECLARE
    current_kb_text text;
    timestamp_header text;
BEGIN
    -- Add a timestamp header to the new summary
    timestamp_header := '-- Summary appended on: ' || now()::text || ' --';

    -- Lock the row to prevent concurrent updates (optional but safer)
    SELECT knowledge_base INTO current_kb_text
    FROM public.folders
    WHERE id = target_folder_id
    FOR UPDATE;

    -- Append the new text with a separator and header
    UPDATE public.folders
    SET knowledge_base = COALESCE(current_kb_text, '') || E'\n\n' || timestamp_header || E'\n\n' || new_summary_text
    WHERE id = target_folder_id;

    -- No explicit return needed for void function
END;
$$;

-- Grant execute permission to the authenticated role (or service_role if called only by backend)
GRANT EXECUTE ON FUNCTION public.append_to_knowledge_base(uuid, text) TO service_role; -- Grant only to service role for backend use
-- If you needed authenticated users to call it directly (unlikely):
-- GRANT EXECUTE ON FUNCTION public.append_to_knowledge_base(uuid, text) TO authenticated;

COMMENT ON FUNCTION public.append_to_knowledge_base(uuid, text) IS 'Appends provided text (session summary) to the knowledge_base field of the specified folder, adding a timestamp header.';

-- ==========================================
-- 12. SESSION MESSAGES & WHITEBOARD SNAPSHOTS TABLES (Phase 1)
-- ==========================================
-- Enum type for session message roles (user vs assistant)
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'session_role') THEN
        CREATE TYPE public.session_role AS ENUM ('user', 'assistant');
    END IF;
END$$;

-- ------------------------------------------
-- 12.1 session_messages
-- ------------------------------------------
CREATE TABLE public.session_messages (
    id           bigserial PRIMARY KEY,
    session_id   uuid NOT NULL REFERENCES public.sessions(id) ON DELETE CASCADE,
    turn_no      integer NOT NULL,
    role         public.session_role NOT NULL,
    text         text,
    payload_json jsonb,
    whiteboard_snapshot_index integer,
    created_at   timestamptz NOT NULL DEFAULT now(),
    CONSTRAINT session_messages_turn_unique UNIQUE (session_id, turn_no)
);
COMMENT ON TABLE public.session_messages IS 'Stores each chat turn for a tutoring session. Turn numbers are sequential per session.';

-- Helpful indexes
CREATE INDEX idx_session_messages_session_created_at ON public.session_messages (session_id, created_at);

-- RLS for session_messages: Users can operate only on their own session rows
ALTER TABLE public.session_messages ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Allow user access to own session_messages" ON public.session_messages
FOR ALL USING (
    auth.uid() = (SELECT user_id FROM public.sessions WHERE id = session_messages.session_id)
);

-- ------------------------------------------
-- 12.2 whiteboard_snapshots
-- ------------------------------------------
CREATE TABLE public.whiteboard_snapshots (
    id              bigserial,
    session_id      uuid NOT NULL REFERENCES public.sessions(id) ON DELETE CASCADE,
    snapshot_index  integer NOT NULL,
    actions_json    jsonb NOT NULL,
    created_at      timestamptz NOT NULL DEFAULT now(),
    PRIMARY KEY (session_id, snapshot_index)
);
COMMENT ON TABLE public.whiteboard_snapshots IS 'Stores cumulative whiteboard action lists keyed by snapshot_index matching assistant turn numbers.';

-- RLS for whiteboard_snapshots
ALTER TABLE public.whiteboard_snapshots ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Allow user access to own whiteboard_snapshots" ON public.whiteboard_snapshots
FOR ALL USING (
    auth.uid() = (SELECT user_id FROM public.sessions WHERE id = whiteboard_snapshots.session_id)
);

-- ------------------------------------------
-- 12.3 Additional indexes for performance
CREATE INDEX idx_whiteboard_snapshots_session_created_at ON public.whiteboard_snapshots (session_id, created_at);

-- ==========================================
-- END OF PHASE-1 PERSISTENCE TABLES
-- ==========================================

-- ==========================================
-- END OF SCHEMA INITIALIZATION
-- ========================================== 