from typing import List, Dict, Any

from ai_tutor.skills import skill

_GREEN = "#2ECC71"  # Success green
_RED = "#E74C3C"    # Error red


@skill
async def draw_mcq_feedback(question_id: str, option_id: int, is_correct: bool, num_options: int = 6) -> List[Dict[str, Any]]:
    """Return whiteboard actions that visually indicate whether the chosen MCQ option was correct.

    The skill tries to keep the visuals minimal so FE can layer them easily:
    • The selected *radio* circle is recoloured green or red.
    • A small check-mark (✓) or cross (✗) text label is placed just to the right of the option text.
    • An `update` action is appended for every option's *radio* and *text* object so the FE can toggle
      `selectable` → False, preventing further clicks after feedback.

    The IDs must match the ones generated by ``draw_mcq_actions`` so that FE updates the correct
    objects.  We assume the same default *question_id* ("q1") unless otherwise specified.
    """

    # ------------------------------------------------------------------ #
    # 1.  Re-colour the selected radio circle
    # ------------------------------------------------------------------ #
    radio_id = f"mcq-{question_id}-opt-{option_id}-radio"
    actions: List[Dict[str, Any]] = [
        {
            "id": radio_id,
            "kind": "update",  # FE should treat this as property update
            "fill": _GREEN if is_correct else _RED,
            "stroke": _GREEN if is_correct else _RED,
        }
    ]

    # ------------------------------------------------------------------ #
    # 2.  Add a ✓ / ✗ mark near the option text label (slightly offset right)
    # ------------------------------------------------------------------ #
    mark_id = f"mcq-{question_id}-opt-{option_id}-mark"
    mark_text = "✓" if is_correct else "✗"
    mark_colour = _GREEN if is_correct else _RED
    # The exact coordinates are best handled by FE using bounding boxes, but we need *some* value.
    # We place it roughly at (x + 300, y) which should be visible on the same row.
    # FE can later fine-tune via CSS / transform.
    actions.append(
        {
            "id": mark_id,
            "kind": "text",
            "x": 400,  # heuristic; FE may adjust
            "y": 100 + option_id * 40,  # aligns with original OPTION_START_Y & spacing
            "text": mark_text,
            "fontSize": 20,
            "fill": mark_colour,
            "metadata": {
                "source": "assistant",
                "role": "mcq_feedback_mark",
                "question_id": question_id,
                "option_id": option_id,
                "is_correct": is_correct,
            },
        }
    )

    # ------------------------------------------------------------------ #
    # 3.  Disable interaction for all option elements so the user cannot change their answer
    # ------------------------------------------------------------------ #
    # Disable only the actual number of options supplied (defaults to 6 for backward compatibility)
    if num_options < 1:
        num_options = 1  # ensure at least one iteration

    for i in range(num_options):
        actions.extend(
            [
                {
                    "id": f"mcq-{question_id}-opt-{i}-radio",
                    "kind": "update",
                    "selectable": False,
                },
                {
                    "id": f"mcq-{question_id}-opt-{i}-text",
                    "kind": "update",
                    "selectable": False,
                },
            ]
        )

    return actions 